# scalar DateTime
# scalar Date
# scalar Duration

# To Add manually in Neo4j
# CREATE CONSTRAINT ON (i:Film) ASSERT i.radiatorID IS UNIQUE;
# CREATE CONSTRAINT ON (i:FilmFestival) ASSERT i.radiatorID IS UNIQUE;

"""
Indicates that the field is the unique identifier for the object type, and additionally enables the autogeneration of IDs.
""" # directive @id(autogenerate: Boolean! = true) on FIELD_DEFINITION
type Film {
  id: ID! @id(autogenerate: true)
  radiatorID: ID!
  nikitaVenturesID: String # SKUs
  filmfriendID: String
  filmhubID: String
  amazonID: String
  vimeoID: String
  eidrID: String
  imdbID: String
  isanNr: String
  titleInternational: String # General Info
  titleOriginal: String
  titleEN: String
  titleFR: String
  titleDE: String
  titleES: String
  loglineEN: String
  loglineFR: String
  loglineDE: String
  loglineES: String
  synopsisShortEN: String
  synopsisShortFR: String
  synopsisShortDE: String
  synopsisShortES: String
  synopsisLongEN: String
  synopsisLongFR: String
  synopsisLongDE: String
  synopsisLongES: String
  duration: Float
  productionYear: Int
  productionMonth: Int
  worldPremiereDate: Date
  status: String
  framerate: String
  ageRating: String #  Parental guidance
  containsNudity: Boolean
  containsViolence: Boolean
  containsDrugUse: Boolean
  iMDBReviews: Int # Reviews
  rottenTomatoesReviews: Int
  letterboxdReviews: Int
  iMDBRating: Float # Ratings
  rottenTomatoesRating: Float
  letterboxdRating: Float
  filmFestivalViewers: Int # Viewers
  tvStationViewers: Int
  vodViewers: Int
  boxOffice: Int
  previewByFilmCriticMagazine: String # Press
  previewByFilmCritic: String
  reviewByFilmCriticMagazine: String
  reviewByFilmCritic: String
  facebookFanPageURL: String # Social media
  instagramProfileURL: String
  twitterProfileURL: String
  websiteOfficial: String # Links
  iMDbLink: String
  tMDBLink: String
  letterboxdPage: String
  justWatchPage: String
  filmfreewayPage: String
  audioFormat: String # Technical info
  aspectRatio: String
  masterShootingMedium: String
  masterShootingFormat: String
  cameraUsed: String
  lensesUsed: String
  editingSoftwareUsed: String
  threeDSoftwareUsed: String
  vFXSoftwareUsed: String
  animationTechniqueUsed: String
  isFilmhubPosterCreated: Boolean # VOD platforms technical
  isFilmhubPortraitStillCreated: Boolean
  isFilmhubLandscapeStillCreated: Boolean
  isFilmhubLandscapeExtra01StillCreated: Boolean
  isFilmhubLandscapeExtra02StillCreated: Boolean
  isFilmhubLandscapeExtra03StillCreated: Boolean
  isFilmfriendPortraitCoverCreated: Boolean
  isFilmfriendLandscapeCoverCreated: Boolean
  isFilmfriendThumbnailCreated: Boolean
  isFilmfriendSliderCreated: Boolean
  isFilmfriendBackgroundCreated: Boolean
  isFilmfriendPortraitCreated: Boolean
  isFilmfriendMaterialsOkQualityCheckPlatform: Boolean
  filmhubLocation: String
  filmhubMaterialsOkQualityCheckPlatform: String
  filmfriendLocation: String
  vuulrVimeoLinkFilm: String # Platform specific links Vimeo
  vuulrVimeoLinkTrailer: String
  filmfreewayVimeoLinkFilm: String
  festhomeVimeoLinkFilm: String
  youtubeTrailerFHDRadiatorChannel: String # Trailer links
  youtubeTrailer4KUHDRadiatorChannel: String
  vimeoTrailerRadiatorWebsite: String
  vimeoTrailerPublic: String
  vimeoScreenerProduction: String # Screener links
  vimeoScreenerDirector: String
  vimeoScreenerCrew: String
  vimeoScreenerDOP: String
  vimeoScreenerProgrammers: String
  vimeoScreenerBuyers: String
  vimeoScreenerPress: String
  vimeoOnDemandFHD: String # VOD Platforms links
  vimeoOnDemand4KUHD: String
  amazonUS: String
  amazonUK: String
  amazonDE: String
  amazonES: String
  tubi: String
  dindintv: String
  kisKisKeepItShortEN: String
  kisKisKeepItShortES: String
  kisKisKeepItShortDE: String
  kisKisKeepItShortFR: String
  bekkesShortFilms: String
  wocomoMovies: String
  wocomoHumanity: String
  filmfriend: String
  amazonIMDBTV: String
  filmzie: String
  fearless: String
  overdrive: String
  kinoscope: String
  sofytv: String
  daFilms: String
  argo: String
  avaLibrary: String
  cinesquare: String
  cinesud: String
  guideDoc: String
  soonerBelgium: String
  soonerGermany: String
  criterionCollection: String
  creedGlobalMedia: String
  artexFilm: String
  cineBooks: String
  cinetree: String
  flexNetTv: String
  filxPremiere: String
  filmocrazy: String
  filmin: String
  gayBingeTV: String
  movieBloc: String
  submittedToFilmFestivals: [FilmFestival!]
    @relationship(
      type: "SUBMITTED_TO"
      properties: "FilmApplicationDetails"
      direction: OUT
    ) # Relationships [FilmFestival]
  selectedAtFilmFestivals: [FilmFestival!]
    @relationship(
      type: "SELECTED_AT"
      properties: "FilmApplicationDetails"
      direction: OUT
    )
  shortlistedAtFilmFestivals: [FilmFestival!]
    @relationship(
      type: "SHORTLISTED_AT"
      properties: "FilmApplicationDetails"
      direction: OUT
    )
  toSubmitToFilmFestivals: [FilmFestival!]
    @relationship(
      type: "TO_SUBMIT_TO"
      properties: "FilmApplicationDetails"
      direction: OUT
    )
  notSelectedAtFilmFestivals: [FilmFestival!]
    @relationship(
      type: "NOT_SELECTED_AT"
      properties: "FilmApplicationDetails"
      direction: OUT
    )
  hasEntryFees: [FilmFestival!]
    @relationship(
      type: "HAS_ENTRY_FEE"
      properties: "FilmEntryFeeDetails"
      direction: OUT
    )
  countSubmittedToFilmFestivals: Int!
    @cypher(
      statement: "MATCH (this)-[x:SUBMITTED_TO]->(:FilmFestival) return COUNT(x)"
    )
  countSelectedAtFilmFestivals: Int!
    @cypher(
      statement: "MATCH (this)-[x:SELECTED_AT]->(:FilmFestival) return COUNT(x)"
    )
  countShortlistedAtFilmFestivals: Int!
    @cypher(
      statement: "MATCH (this)-[x:SHORTLISTED_AT]->(:FilmFestival) return COUNT(x)"
    )
  countToSubmitToFilmFestivals: Int!
    @cypher(
      statement: "MATCH (this)-[x:TO_SUBMIT_TO]->(:FilmFestival) return COUNT(x)"
    )
  countNotSelectedAtFilmFestivals: Int!
    @cypher(
      statement: "MATCH (this)-[x:NOT_SELECTED_AT]->(:FilmFestival) return COUNT(x)"
    )
  countFestivalApplications: Int!
    @cypher(statement: "MATCH (this)-[x]->(:FilmFestival) return COUNT(x)")
  screenedAtFilmFestivals: [FilmFestival!]
    @relationship(type: "SCREENED_AT", direction: OUT)
  awardedAtFilmFestivals: [FilmFestival!]
    @relationship(type: "AWARDED_AT", direction: OUT)
  proposedAtFilmFestivals: [FilmFestival!]
    @relationship(type: "PROPOSED_TO", direction: OUT)
  licensedByFilmFestivals: [FilmFestival!]
    @relationship(type: "LICENSED_BY", direction: OUT)
  dcpSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "DCP_SENT_TO", direction: OUT)
  appleProres4444FHDSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "APPLE_PRORES_4444_FHD_SENT_TO", direction: OUT)
  appleProres44444KUHDSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "APPLE_PRORES_4444_4KUHD_SENT_TO", direction: OUT)
  h264HQFHDSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "H264_HQ_FHD_SENT_TO", direction: OUT)
  posterSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "POSTER_SENT_TO", direction: OUT)
  stillsSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "STILLS_SENT_TO", direction: OUT)
  subtitlesSentToFilmFestivals: [FilmFestival!]
    @relationship(type: "SUBTITLES_SENT_TO", direction: OUT)
  materialsDeliveryOkForFilmFestivals: [FilmFestival!]
    @relationship(type: "MATERIALS_DELIVERY_OK_FOR", direction: OUT)
}

interface FilmApplicationDetails @relationshipProperties {
  applicationDate: Date
  feeUSD: Float
  feeEUR: Float
  waivedAmountUSD: Float
  waivedAmountEUR: Float
}

interface FilmEntryFeeDetails @relationshipProperties {
  budgetUSD: Float
  budgetEUR: Float
  receiveDate: Date
}

type FilmFestival {
  id: ID! @id(autogenerate: true)
  radiatorID: ID!
  nameInternational: String! # General info
  nameOriginal: String
  address: String
  about: String
  email: String
  telephone: String
  dateStart: Date
  dateEnd: Date
  level: String
  foundingYear: Int
  locatedInCountry: String
  takesPlaceInCity: String
  awards: String
  isFIAPFAccredited: Boolean # Accreditations
  isAcademyAccredited: Boolean
  isEFAAccredited: Boolean
  isBaftaAccredited: Boolean
  isGoyaAccredited: Boolean
  isMeliesAccredited: Boolean
  isCanandianScreenGuildAccredited: Boolean
  isEAAAccredited: Boolean
  isFriends: Boolean
  isPartner: Boolean
  acceptsFilmLenghts: String # Film Requirements
  acceptsFilmGenre01: String
  acceptsFilmGenre02: String
  acceptsFilmGenre03: String
  deadlineMonth: String
  rulesAndRegulations: String
  premiereRequirement: String
  filmAge: String
  organisers: String # Management
  artisticDirector: String
  president: String
  founder: String
  programManager: String
  seniorProgrammer01: String
  seniorProgrammer02: String
  seniorProgrammer03: String
  shortsProgrammer01: String
  shortsProgrammer02: String
  websiteMain: String # Links
  facebookPage: String
  instagramProfile: String
  twitterProfile: String
  cinandoProfile: String
  iMDBProfile: String
  filmfreewayLink: String
  submissionPageOriginal: String # Submission details
  submissionPageFilmfreeway: String
  submissionDateEarly: Date
  submissionDateRegular: Date
  submissionDateLate: Date
  submissionFeeEarly: Float
  submissionFeeRegular: Float
  submissionFeesLate: Float
  submissionRegulations: String
  venue01: String # Venues
  venue02: String
  venue03: String
  venue04: String
  venue05: String
  selectionLaurel: String # Laurels
  awardLaurel: String
  comments: String # Added in sprint 3
}

type DevTask {
  id: ID! @id(autogenerate: true)
  title: String
  description: String
  creationDate: DateTime
  comments: String
  priority: Int
  assignedToSprint: String
}

# extend type DevTask @auth(rules: [{ isAuthenticated: true }])

type User {
  user_id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  email: String!
  name: String!
  nickname: String!
  picture: String!
}

type Person {
  id: ID! @id(autogenerate: true)
  radiatorID: String
  displayName: String!
  addressHomeCity: String
  addressHomeCountryEN: String
  addressHomeCountryIso: String
  addressHomeStreet01: String
  addressHomeStreet02: String
  addressHomeZip: String
  nameOrganisation01: String
  nameOrganisation02: String
  emailMain: String
  prefixEmail: String
  emailPreferred: String
  emailHyperlink: String
  nameFirstName: String
  nameLastName: String
  nameFullName: String
  nameNickname: String
  biographyEN: String
  biographyFR: String
  phoneFix: String
  peplePhoneMobile: String
  preferredLanguage: String
  profession: String
  profession01: String
  profession02: String
  languagesSpoken: String
  websiteMain: String
  imdbProfile: String
  linkedinProfile: String
  vimeoProfile: String
  instagramProfile: String
  twitterProfile: String
  facebookProfile: String
  socialMediaOther: String
  bank01Name: String
  bank01Code: String
  bank01BicCode: String
  bank01HolderName: String
  bank01IbanNr: String
  bank01IbanCountryCode: String
  bank01AccountCountry: String
  bank01AccountAddress: String
  payPalAccount: String
  
  hasProfessions: [PersonProfession!]
        @relationship(
      type: "HAS_PROFESSION"
      direction: OUT
    )
  organisations: [Organisation!]
        @relationship(
      type: "HAS_MEMBER"
      properties: "HasMember"
      direction: IN
    )
}

type PersonProfession {
  id: ID! @id(autogenerate: true)
  radiatorID: String
  name: String
  description: String
  people: [Person!]
        @relationship(
      type: "HAS_PROFESSION"
      direction: IN
  )
}

type Organisation {
  id: ID! @id(autogenerate: true)
  radiatorID: String
  name: String
  type: String
  addressCity: String
  addressCountry: String
  addressCountryIso: String
  addressStreet01: String
  addressStreet02: String
  addressZip: String
  vatNumber: String
  displayName: String
  peopleName01: String
  peopleName02: String
  peopleName03: String
  peopleName04: String
  peopleName05: String
  peopleName06: String
  peopleName01JobTitle: String
  peopleName02JobTitle: String
  peopleName03JobTitle: String
  organizationPeopleName04JobTitle: String
  organizationPeopleNamer05JobTitle: String
  organizationPeopleName06JobTitle: String
  displayTags: String
  mainEmail: String
  fax: String
  mainPhone: String
  notes: String
  website: String
  fullAddress: String
  tBankCode: String
  bankName: String
  bankBic: String
  bankIban: String
  banktNo: String
  bankAddress: String
  organizationVimeoPage: String
  facebookFanPage: String
  instagramProfile: String
  youtubeProfile: String
  twitterProfile: String

  countMembers: Int!
    @cypher(
      statement: "MATCH (this)-[x:HAS_MEMBER]->(:Person) return COUNT(x)"
    )
  people: [Person!]
        @relationship(
      type: "HAS_MEMBER"
      properties: "HasMember"
      direction: OUT
    )
}

interface HasMember @relationshipProperties {
  fromDate: String
  toDate: String
}

type Query {
  filmCount: Int! @cypher(statement: "MATCH (u:Film) RETURN COUNT(u)")
  filmFestivalCount: Int!
  @cypher(statement: "MATCH (u:FilmFestival) RETURN COUNT(u)")
  devTaskCount: Int! @cypher(statement: "MATCH (u:DevTask) RETURN COUNT(u)")
  organisationCount: Int! @cypher(statement: "MATCH (u:Organisation) RETURN COUNT(u)")
  personCount: Int! @cypher(statement: "MATCH (u:Person) RETURN COUNT(u)")
  personProfessionCount: Int! @cypher(statement: "MATCH (u:PersonProfession) RETURN COUNT(u)")
  user(id: String!): User
  users(name: String): [User!]!
  #filmSubmissions: [Film!] @cypher(statement: "MATCH (a:Film)-[x]->(b:FilmFestival) return a, x, b")
}
